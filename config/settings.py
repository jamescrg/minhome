"""
Django settings for config project.

Generated by "django-admin startproject" using Django 3.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from pathlib import Path

import environ

# Initialize environ
env = environ.Env(
    # Set casting and default values
    DEBUG=(bool, False),
    ZIP_PRIMARY=(int, 30360),
    ZIP_SECONDARY=(int, 30533),
)

# Read .env file
BASE_DIR = Path(__file__).resolve().parent.parent
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))

# Site settings
SITE_NAME = env("SITE_NAME")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

# check dev v. production environment
ENV = env("ENV")

# urls to which the application will respond
ALLOWED_HOSTS = env.list("ALLOWED_HOSTS")


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "mathfilters",
    "crispy_forms",
    "crispy_bootstrap5",
    "accounts",
    "apps.folders",
    "apps.home",
    "apps.favorites",
    "apps.tasks",
    "apps.contacts",
    "apps.finance",
    "apps.lab",
    "apps.management",
    "apps.notes",
    "apps.search",
    "apps.settings",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.common.BrokenLinkEmailsMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

default_loaders = [
    "django.template.loaders.filesystem.Loader",
    "django.template.loaders.app_directories.Loader",
]

cached_loaders = [("django.template.loaders.cached.Loader", default_loaders)]

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [str(BASE_DIR.joinpath("templates"))],
        # 'APP_DIRS': True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "config.context.env",
                "config.context.site_handle",
            ],
            "loaders": default_loaders if DEBUG else cached_loaders,
            "libraries": {
                "cache_buster": "apps.management.templatetags.cache_buster",
            },
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": env("DB_NAME"),
        "USER": env("DB_USER"),
        "PASSWORD": env("DB_PASSWORD"),
        "HOST": "localhost",
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "America/New_York"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = "/static/"
STATICFILES_DIRS = [str(BASE_DIR.joinpath("static"))]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

AUTH_USER_MODEL = "accounts.CustomUser"

LOGIN_REDIRECT_URL = "home"
LOGOUT_REDIRECT_URL = "home"

INTERNAL_IPS = [
    "127.0.0.1",
]


# Email
EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"
EMAIL_HOST = env("EMAIL_HOST")
EMAIL_USE_TLS = True
EMAIL_PORT = 587
EMAIL_HOST_USER = env("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = env("EMAIL_HOST_PASSWORD")
SERVER_EMAIL = env("SERVER_EMAIL")
ADMINS = [(env("ADMINS_NAME"), env("ADMINS_EMAIL"))]

# API Keys
OPEN_WEATHER_API_KEY = env("OPEN_WEATHER_API_KEY")
CRYPTO_API_KEY = env("CRYPTO_API_KEY")
ALPHAVANTAGE_STOCKS_API_KEY = env("ALPHAVANGAGE_STOCKS_API_KEY")
FINNHUB_API_KEY = env("FINNHUB_API_KEY")

# Location Settings
ZIP_PRIMARY = env("ZIP_PRIMARY")
ZIP_SECONDARY = env("ZIP_SECONDARY")

# Financial Symbols
CRYPTO_SYMBOLS = env("CRYPTO_SYMBOLS")
SECURITIES_ASSET_LIST = [
    {
        "symbol": "GME",
        "exchange": "NYSE",
        "name": "Gamestop",
    },
    {
        "symbol": "TSLA",
        "exchange": "NASDAQ",
        "name": "Tesla",
    },
    {
        "symbol": "TLRY",
        "exchange": "NASDAQ",
        "name": "Tilray",
    },
    {
        "symbol": "SNDL",
        "exchange": "NASDAQ",
        "name": "Sundial",
    },
    {
        "symbol": "BBBY",
        "exchange": "NASDAQ",
        "name": "BBBY",
    },
    {
        "symbol": "O",
        "exchange": "NYSE",
        "name": "REIT",
    },
    {
        "symbol": "FXF",
        "exchange": "NYSEARCA",
        "name": "Swiss Francs",
    },
    {
        "symbol": "GLD",
        "exchange": "NSEARCA",
        "name": "Gold ETF",
    },
    {
        "symbol": "QQQ",
        "exchange": "NASDAQ",
        "name": "Invesco Tech",
    },
    {
        "symbol": "VTV",
        "exchange": "NYSEARCA",
        "name": "Vanguard Value",
    },
]

# Test email recipient
TEST_EMAIL_RECIPIENT = [env("TEST_EMAIL_RECIPIENT")]


# set cookies (sessions) to last for two months
# default is two weeks, multiplying by four to get two months
SESSION_COOKIE_AGE = 1209600 * 4

SESSION_SAVE_EVERY_REQUEST = True


CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

CRISPY_TEMPLATE_PACK = "bootstrap5"

LOGGING = {
    # The version number of our log
    "version": 1,
    # django uses some of its own loggers for internal operations.
    # In case you want to disable them just replace the False above with true.
    "disable_existing_loggers": False,
    # A handler for WARNING. It is basically writing
    # the WARNING messages into a file called WARNING.log
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": "logging.FileHandler",
            "filename": BASE_DIR / "warning.log",
        },
    },
    # A logger for WARNING which has a handler called "file".
    # A logger can have multiple handlers.
    "loggers": {
        # Notice the blank "".
        # Usually you would put built in loggers
        # like django or root here based on your needs.
        "": {
            # Notice how file variable is called
            # in handler which has been defined above
            "handlers": ["file"],
            "level": "WARNING",
            "propagate": True,
        },
    },
}
